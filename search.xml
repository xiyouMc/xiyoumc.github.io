<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[原来我也开始写感情]]></title>
      <url>https://xiyoumc.github.com/2016/08/17/emotional/</url>
      <content type="html"><![CDATA[<p><img src="https://github.com/xiyouMc/xiyoumc.github.io/blob/master/images/emo_pic.png?raw=true" alt="pic"></p>
<blockquote>
<p>原来我也到了开始写文章的时候</p>
<p>感情……</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>以前一味的追求 一味的表白  一味的刺激  也注定一次次的失败 两年 一年  这两段是我记忆最清楚的！  一 段是初恋，一段是爱到深处的人！ </p>
<p>初恋永远都是青涩的，因为没有伤痛，没有心里的伤痛！  然而爱到深处的人，却是给心烙下永远痕迹的人！   爱到深处，却没有做到爱应该做到的事情，幼稚、冲动、粗心  也注定让我失去了这段感情，有些感情，明知道你爱她，她也爱你！可就是无力挽回！  到最后只能再见！</p>
<p>单身，累的、寂寞的、痛苦的、挣扎着！ 分手后的那一个月，我天天沉浸在折磨 痛苦 噩梦  幻想中， 因为走 在路上感觉每一个陌生的人都是她，喜欢的每一个人都希望是她，可是总有这里或者那里不像！  时间可以冲淡一切，那段时间，我也一直在反思、反思自己做错了什么 为什么发生错误的时候、承诺可以回到以前，却在后面的行动中还是一如既往！ 分开后的那段时间，我想清楚了，那时候根本已经回不去了！ 有些事错了就永远都不会再对！  只能在后面的开始，去避免类似的这些事。</p>
<p>单身，成长的、自我反省的、完善自己  总结自己！  爱一个人，不是说你拥有了就能够天长地久！ 其实爱一 个人很简单，就是看着她就开心，你会有一种莫名的想去照顾她，可是却没有理由去面对她。 爱一个人也是纠结 的，因为你明明很想拥有她，可是却不敢去表达，去占有，因为怕这种爱变了性质，怕自己不成熟！  </p>
<p>现在的我，也清楚了怎么去认真对待一段感情，或者说怎么去认真对待一份还没开始的感情！  这个世界其实说 白了，谁离开谁都可以活下去，而重要的是 你的自我提升，就算别人最后没有同意你，那么也说明你还有不足之处，那么你就需要改进努力，以达到自善其身的方向！做一个靠谱、贴心、可被依靠的人！  </p>
</blockquote>
<ul>
<li>My Sunshine！My Love! fur u and  fur me！</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hybrid调试指南]]></title>
      <url>https://xiyoumc.github.com/2016/08/17/hybrid%E8%B0%83%E8%AF%95%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p><img src="https://github.com/xiyouMc/HybridApp/blob/master/%20hybrid.png?raw=true" alt="inspect1"></p>
<h1 id="Hybrid调试指南"><a href="#Hybrid调试指南" class="headerlink" title="Hybrid调试指南"></a>Hybrid调试指南</h1><blockquote>
<p>开发接口过程中如何自测接口?</p>
</blockquote>
<a id="more"></a>
<h2 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h2><blockquote>
<ul>
<li>Chrome</li>
<li>Android SDK Level &gt;=19</li>
</ul>
</blockquote>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><blockquote>
<ul>
<li>Android设备连接电脑，并打开USB调试</li>
<li>通过Hybrid打开任意页面</li>
<li>使用Chrome浏览器打开，<a href="chrome://inspect" target="_blank" rel="external">chrome://inspect</a>,  调用JSBridge对应的接口</li>
</ul>
</blockquote>
<h2 id="Picture"><a href="#Picture" class="headerlink" title="Picture"></a>Picture</h2><blockquote>
<ul>
<li>以下是 “隐藏TitleBar”为例，通过JSBridge来隐藏Native的标题栏</li>
</ul>
</blockquote>
<ul>
<li>打开Console控制台</li>
</ul>
<p><img src="https://raw.githubusercontent.com/xiyouMc/HybridApp/master/images/inspect1.png" alt="inspect1"></p>
<ul>
<li>注入JSBridge.call(“hideTitlebar”);</li>
</ul>
<p><img src="https://raw.githubusercontent.com/xiyouMc/HybridApp/master/images/inspect2.png" alt="inspect2"></p>
<ul>
<li>App端隐藏掉Titlebar</li>
</ul>
<p><img src="https://raw.githubusercontent.com/xiyouMc/HybridApp/master/images/hideTitlebar.png" alt="hideTitle"></p>
<ul>
<li>通过Hybrid打开任意页面，测试页面-Slideplus素材中心页</li>
<li>使用Chrome浏览器打开，<a href="chrome://inspect" target="_blank" rel="external">chrome://inspect</a></li>
</ul>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p>&gt;</p>
<ul>
<li>JSBridge.call(“hideTitlebar”)  —Hide Title bar</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[插件化框架简介]]></title>
      <url>https://xiyoumc.github.com/2016/05/05/%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>本框架是建立在 <a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">Dynamic-load-apk</a>进行的上层封装。增加插件动态加载到libs目录和针对模块Service的注入。</p>
<p>本文将以H5Core为插件进行讲解。</p>
<h5 id="更新日志："><a href="#更新日志：" class="headerlink" title="更新日志："></a>更新日志：</h5><p>&gt;</p>
<ul>
<li>2016/7/6  commit -m “增加懒加载功能”   hash: 2a335dc49654c80fb6779cacefdf3ed712c23a8</li>
</ul>
<h1 id="插件化框架简介"><a href="#插件化框架简介" class="headerlink" title="插件化框架简介"></a>插件化框架简介</h1><ul>
<li>插件化是将Apk中功能类似的模块封装到独立的Application中，并根据框架约定好的规则完成Apk的动态加载和Service的注入。</li>
<li>本框架是将每一个Apk作为so并使用定制化打包脚本将so文件打到主Project/libs/jniLibs，这样在apk编译的时候就可以将so文件直接装载进data/data/xxxxx/lib目录，支持后续的DexClassLoader加载该文件。</li>
<li>每一个模块分为Api和Core，Api作为模块对外提供的接口，Core作为封装好的独立模块，每一个模块做好自己的混淆。注入操作需在Core中定义，下文将介绍这块。</li>
<li><p>主Client增加bundleList.config文件，文件配置：</p>
<pre><code>bundleName=h5core    //直接加载的插件
lazyBundle=h5core.H5Service&amp;H5Api //懒加载插件
</code></pre></li>
</ul>
<h2 id="一、Framework"><a href="#一、Framework" class="headerlink" title="一、Framework"></a>一、Framework</h2><ul>
<li>Framework提供了一个动态加载apk的框架，并提供一个加载独立模块的BaseMateinfo。</li>
</ul>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol>
<li>开发模块时需要在  module(core)/package name/下定义Metainfo继承自BaseMateinfo。 这样该模块在主Apk安装的时候就会动态将模块的接口注入到框架，后续提供给其它组件调用。</li>
<li><p>模块提供的主要方法类有:BasePluginActivity,BasePluginFragmentActivity,BasePluginService,BaseMateinfo,MarkApplication.</p>
<pre><code>BasePluginActivity: 基础的Activity，每一个模块中的Activity都需要继承该类，完成模块中的Activity的代理化。
BasePluginFragmentActivity： 基础的FragmentActivity，同上。需要继承该类
BasePluginService: 基础的Service，同上。
BaseMateinfo: 模块Service注入的基类，其它模块的Core层都需要定义一个Metainfo来继承该类，并完成Service的注入。（后面会介绍如何注入）
MarkApplication:模块的Application，可以拿到模块的Context，并提供查找Service，启动Activity等方法。
</code></pre></li>
</ol>
<h2 id="二、Activity层"><a href="#二、Activity层" class="headerlink" title="二、Activity层"></a>二、Activity层</h2><ul>
<li>为了让proxy全面接管apk中所有activity的执行，需要为activity定义一个基类BaseActivity，在基类中处理代理相关的事情，同时BaseActivity还对是否使用代理进行了判断，如果不使用代理，那么activity的逻辑仍然按照正常的方式执行，也就是说，这个apk既可以按照执行，也可以由宿主程序来执行。</li>
</ul>
<h3 id="独立模块架构"><a href="#独立模块架构" class="headerlink" title="独立模块架构"></a>独立模块架构</h3><ul>
<li>模块分类：Api和Core,针对不同业务可追加前缀。</li>
<li>每一个模块对外提供一个Service供其他模块引用。Service的Interface类放在Api模块，实现类放在Core。实现独立模块的封装。</li>
<li><p>Service注册：在Core的根包目录创建MetaInfo类，继承Framework模块的BaseMetaInfo.如下：</p>
<pre><code>public class MetaInfo extends BaseMetaInfo {
private static final String TAG = &quot;MetaInfo.Init&quot;;
public MetaInfo() {
    Log.d(TAG,&quot;Service init&quot;);
    ServiceDescription serviceDescription = new ServiceDescription();
    serviceDescription.setInterfaceName(XXService.class.getName());
    serviceDescription.setClassName(XXServiceImpl.class.getName());
    services.add(serviceDescription);
}
}
注解:
ServiceDescription类是针对Service的描述类，将接口和实现封装在该对象，并将其添加到services列表中。
</code></pre><p>  以上工作就完成了模块的注入。</p>
</li>
</ul>
<h3 id="模块之间依赖"><a href="#模块之间依赖" class="headerlink" title="模块之间依赖"></a>模块之间依赖</h3><ul>
<li>模块只要是通过Api包的依赖进行访问。由于Api是作为一个Jar存在的，因此可以直接被其它模块依赖，并切记使用 provided来依赖，防止Api的jar包被编译进模块。</li>
<li><p>模块之间访问：主要的类有MarkApplication、MicroApplicationContext。</p>
<pre><code>比如其他模块访问Core:
XXService xxservice = MarkApplication.getInstance().getMicroApplicationContext().findServiceByInterface(XXService.class.getName());
这样就可以拿到容器的Service，从而调用其提供的方法。
</code></pre></li>
</ul>
<h3 id="模块内部资源的访问"><a href="#模块内部资源的访问" class="headerlink" title="模块内部资源的访问"></a>模块内部资源的访问</h3><ul>
<li><p>由于每一个模块作为独立的apk打入主apk,因此访问该apk的上下文不再是该apk的，而是框架层的代理上下文。</p>
<pre><code>示例：
1、Resourse获取
    MarkApplication.getInstance().getMicroApplicationContext().getResourcesByBundle(&quot;xxcore&quot;);
2、Assets获取
    MarkApplication.getInstance().getMicroApplicationContext().getAssetsByBundle(&quot;xxcore&quot;);
</code></pre></li>
</ul>
<h3 id="Gradle打包命令详解"><a href="#Gradle打包命令详解" class="headerlink" title="Gradle打包命令详解"></a>Gradle打包命令详解</h3><ul>
<li>gradle build ：编译当前模块。</li>
<li>gradle buidleJar:针对本模块生成jar包，保存目录在  xxx/build/libs/xxxx.jar</li>
<li>gradle uploadArchives:上传本项目包到Nexus服务器，提供给其他模块依赖</li>
</ul>
<p>例子：</p>
<p>1、Api包的<a href="https://github.com/xiyouMc/AppDynamicFramework/blob/master/API.MD" target="_blank" rel="external">build.gradle模版</a><br>2、Core包的 <a href="https://github.com/xiyouMc/AppDynamicFramework/blob/master/CORE.MD" target="_blank" rel="external">build.gradle模版</a></p>
<h2 id="三、依赖关系介绍"><a href="#三、依赖关系介绍" class="headerlink" title="三、依赖关系介绍"></a>三、依赖关系介绍</h2><ul>
<li>如今模块化之后，依赖关系的复杂度也相比之前复杂了不少，因此梳理好依赖关系是必须考虑的问题。</li>
</ul>
<h3 id="模块化主要的依赖关系："><a href="#模块化主要的依赖关系：" class="headerlink" title="模块化主要的依赖关系："></a>模块化主要的依赖关系：</h3><pre><code>框架主要有Portal、Framework、Module三个模块：
1、Portal是项目的Launcher目录。
2、Framework是框架的架构模块。
3、Module是每一个模块，并分为Api和Core，并且Api作为Android.library、Core作为Android.application.
4、每一个模块通过依赖其它模块的Api进行组件的调用。并且每一个Core都需要依赖Framework。
</code></pre><h3 id="插件apk的开发规范"><a href="#插件apk的开发规范" class="headerlink" title="插件apk的开发规范"></a>插件apk的开发规范</h3><p>开发插件apk所需要遵循的规范：</p>
<p><del>1. 不能用this：因为this指向的是当前对象，即apk中的activity，但是由于activity已经不是常规意义上的activity，所以this是没有意义的</del></p>
<p><del>2. 使用that：既然this不能用，那就用that，that是apk中activity的基类BaseActivity中的一个成员，它在apk安装运行的时候指向this，而在未安装的时候指向宿主程序中的代理activity，anyway，that is better than this.</del></p>
<p><del>3. 不能直接调用activity的成员方法：而必须通过that去调用，由于that的动态分配特性，通过that去调用activity的成员方法，在apk安装以后仍然可以正常运行。</del></p>
<ol>
<li>启动新activity的约束：启动外部activity不受限制，启动apk内部的activity有限制，首先由于apk中的activity没注册，所以不支持隐式调用，其次必须通过BaseActivity中定义的新方法startActivityByProxy和startActivityForResultByProxy，还有就是不支持LaunchMode。</li>
<li>目前暂不支持Service、BroadcastReceiver等需要注册才能使用的组件。</li>
</ol>
<h2 id="四、更新功能"><a href="#四、更新功能" class="headerlink" title="四、更新功能"></a>四、更新功能</h2><ul>
<li><p>2016/7/6 懒加载功能</p>
<pre><code>1、bundleList.config 文件增加lazyBundle字段来标示是否进行懒加载。字段值格式：bundleName.bundleService*bundleService。这样在该插件被调用的时候，框架采取load这个dex。    
2、优化效果：681kb的so，首次启动懒加载优化100ms。
</code></pre></li>
</ul>
<p>Thankd for your reading, by Mc…    Thanks Dynamic-load-apk</p>
<p>update</p>
<h2 id="Contact-me"><a href="#Contact-me" class="headerlink" title="Contact me"></a>Contact me</h2><p>Any further question?</p>
<p><a href="mailto:tmac694449212@gmail.com" target="_blank" rel="external">Email</a> me please!</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><pre><code>Copyright 2016 xiyouMc

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</code></pre>]]></content>
    </entry>
    
  
  
</search>
